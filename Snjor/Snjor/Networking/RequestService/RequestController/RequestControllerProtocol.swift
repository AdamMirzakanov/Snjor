//
//  RequestControllerProtocol.swift
//  Snjor
//
//  Created by Адам Мирзаканов on 18.12.2024.
//

import Foundation

protocol RequestControllerProtocol: AnyObject {
  /// Формирует запрос для получения фотографий.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использован для выполнения
  /// запроса к API для получения списка фотографий. Он использует заранее подготовленные
  /// параметры запроса, специфичные для фотографий.
  ///
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для получения фотографий.
  /// - Note: Метод использует вспомогательный класс `PrepareParameters`
  /// для подготовки параметров запроса и `NetworkRequestService` для формирования самого запроса.
  func photosRequest() throws -> URLRequest
  
  /// Формирует запрос для получения альбомов.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использован для выполнения
  /// запроса к API для получения списка альбомов. Он использует заранее подготовленные
  /// параметры запроса, специфичные для альбомов.
  ///
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение альбомов.
  func albumsRequest() throws -> URLRequest
  
  /// Формирует запрос для поиска фотографий.
  ///
  /// Этот метод использует переданный строковый параметр `searchTerm` для подготовки
  /// параметров запроса, а затем создает объект `URLRequest`, который будет использован
  /// для выполнения запроса к API для получения фотографий, соответствующих указанному
  /// в стороке поиска.
  ///
  /// - Parameter searchTerm: Строка, представляющая текст поиска для фотографий.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на поиск фотографий.
  func searchPhotosRequest(with searchTerm: String) throws -> URLRequest
  
  /// Формирует запрос для поиска альбомов.
  ///
  /// Этот метод использует переданный строковый параметр `searchTerm` для подготовки
  /// параметров запроса, а затем создает объект `URLRequest`, который будет использован
  /// для выполнения запроса к API для получения альбомов, соответствующих указанному
  /// в стороке поиска.
  ///
  /// - Parameter searchTerm: Строка, представляющая текст поиска для альбомов.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на поиск альбомов.
  func searchAlbumsRequest(with searchTerm: String) throws -> URLRequest
  
  /// Формирует запрос для поиска пользователей.
  ///
  /// Этот метод использует переданный строковый параметр `searchTerm` для подготовки
  /// параметров запроса, а затем создает объект `URLRequest`, который будет использован
  /// для выполнения запроса к API для получения пользователей, соответствующих указанному
  /// в стороке поиска.
  ///
  /// - Parameter searchTerm: Строка, представляющая текст поиска для пользователей.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на поиск пользователей.
  func searchUsersRequest(with searchTerm: String) throws -> URLRequest
  
  func photoDetailRequest(photo: Photo) throws -> URLRequest
  
  /// Формирует запрос для получения информации о профиле пользователя.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения данных о конкретном пользователе. Запрос включает
  /// имя пользователя в качестве сегмента пути.
  ///
  /// - Parameter user: Объект `User`, представляющий пользователя, информацию о профиле
  /// которого нужно получить.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// информации о профиле пользователя.
  func userProfileRequest(user: User) throws -> URLRequest
  
  /// Формирует запрос для получения фотографий, которые пользователь лайкал.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения всех фотографий, которые были лайкнуты конкретным пользователем.
  /// Запрос включает имя пользователя в качестве сегмента пути и параметры, необходимые для
  /// корректного формирования запроса.
  ///
  /// - Parameter user: Объект `User`, представляющий пользователя, чьи лайкнутые фотографии
  /// нужно получить.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// лайкнутых фотографий пользователя.
  func userLikedPhotosRequest(user: User) throws -> URLRequest
  
  /// Формирует запрос для получения фотографий, принадлежащих пользователю.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения всех фотографий, загруженных конкретным пользователем.
  /// Запрос включает имя пользователя в качестве сегмента пути и параметры, необходимые для
  /// корректного формирования запроса.
  ///
  /// - Parameter user: Объект `User`, представляющий пользователя, чьи фотографии
  /// нужно получить.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// фотографий пользователя.
  func userPhotosRequest(user: User) throws -> URLRequest
  
  /// Формирует запрос для получения альбомов, принадлежащих пользователю.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения всех альбомов, созданных конкретным пользователем.
  /// Запрос включает имя пользователя в качестве сегмента пути и необходимые параметры
  /// для корректного формирования запроса.
  ///
  /// - Parameter user: Объект `User`, представляющий пользователя, чьи альбомы
  /// нужно получить.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// альбомов пользователя.
  func userAlbumsRequest(user: User) throws -> URLRequest
  
  /// Формирует запрос для получения случайной фотографии пользователя.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения случайной фотографии, связанной с конкретным пользователем.
  /// Запрос включает имя пользователя в параметрах и путь к фотографиям.
  ///
  /// - Parameter user: Объект `User`, представляющий пользователя, для которого
  /// нужно получить случайную фотографию.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// случайной фотографии пользователя.
  /// - Note: Запрашиается вертикальная фотография.
  func randomUserPhotoRequest(user: User) throws -> URLRequest
  
  /// Формирует запрос для получения фотографий внутри определенного топика.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API для получения фотографий, относящихся к конкретной категории (топика).
  /// Запрос включает идентификатор топика и путь к фотографиям, а также параметры
  /// для фильтрации результатов.
  ///
  /// - Parameter topic: Объект `Topic`, представляющий категорию, для которой
  /// нужно получить фотографии.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// фотографий по заданному топику.
  func topicPhotosRequest(topic: Topic) throws -> URLRequest
  
  /// Формирует запрос для получения фотографий внутри определенного альбома.
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API с целью получения фотографий, относящихся к заданному альбому.
  /// Запрос включает идентификатор альбома, путь к альбомам и фотографии, а также
  /// параметры для фильтрации результатов.
  ///
  /// - Parameter album: Объект `Album`, представляющий альбом, для которого
  /// нужно получить фотографии.
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// фотографий внутри указанного альбома.
  func albumPhotosRequest(album: Album) throws -> URLRequest
  
  /// Формирует запрос для получения заголовков категорий (топиков).
  ///
  /// Этот метод создает объект `URLRequest`, который будет использоваться для выполнения
  /// запроса к API с целью получения списка заголовков доступных топиков.
  ///
  /// - Throws: `APIError` в случае ошибки при подготовке запроса.
  /// - Returns: Настроенный объект `URLRequest` для выполнения запроса на получение
  /// заголовков топиков.
  func topicsTitleRequest() throws -> URLRequest
}
